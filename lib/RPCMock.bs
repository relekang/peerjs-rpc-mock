import bluebird as Promise
import mock-require as mr
RPC = require('peerjs-rpc')

export RPCMock

mocks = {}

class RPCMock extends RPC

  init: (id, scope, options) ->
    @id = id
    @scope = scope
    mocks[id] = @
    @delays = {}
    @timeout = 5000
    if options
      @delays = {}
      @timeout = options.timeout or 5000

  _sendInvocation: (id, payload, connection) ->
    that = @
    delay = 0
    if id in @delays
      delay = @delays[id]
    return new Promise((resolve, reject) ->
      delayTimeout = setTimeout(() ->
        that._callbacks[payload.signature] = (result) ->
          clearTimeout(that._timeouts[payload.signature])
          if result instanceof Error
            reject(result)
          else
            resolve(result)
        mocks[id]._onData(null, payload)
      , delay)
      
      that._timeouts[payload.signature] = setTimeout(() ->
        clearTimeout(delayTimeout)
        reject(new Error('Message timed out.'))
      , that.timeout)
    )

  _sendAnswer: (id, payload, connection) ->
    delay = 0
    if id in @delays
      delay = @delays[id]
    return new Promise((resolve) ->
      setTimeout(() ->
        resolve(mocks[id]._onData(null, payload))
      , delay)
    )
